import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import random

n = 100

coors = np.random.randn(n,2)
sns.scatterplot(coors[:,0],coors[:,1])
plt.show()


way = np.arange(n)
random.shuffle(way)

def E(s=way):
  return np.linalg.norm(pd.DataFrame(coors[s]).diff().apply(lambda x: x ** 2).dropna(),2)
E()

def rep(seq):
  a = random.randint(0,n)
  b = random.randint(0,n)
  if a<b:
    tmp = seq[a:b]
    tmp.reverse()
    seq[a:b] = tmp
  else:
    tmp = seq[b:a]
    tmp.reverse()
    seq[b:a] = tmp
  return seq



def plot_s(s=way):
  sns.scatterplot(coors[:, 0][s], coors[:, 1][s])
  plt.show()

plot_s()


# ??????? ???????? ??????
f<-function(s=way, iter=100000, plo=T,Temp=15,Temp_end=0.00000000000001) {
  Es <- E(s)# ??????????? ??????? ??? ??????? ?????????
  for (i in 1:iter){
    ns <- Rep(s) # ???????? ?????????-????????
    Ens <- E(ns) # ????????? ??? ???????
    cat(i, Es,Ens,"\n")
    if (Ens<Es){ # ???? ???????? ???????? ??????? ????????
      s <- ns # ?? ??? ?????????? ??????? ??????????
      Es <- Ens
      if (plo){
        plot.s(s)
        title(paste("i=",i,"E=",signif(Es,3)))
        Temp <- Temp*0.9
        if(Temp<=Temp_end){
          break()
        }
      }
    }else{
      if(sample(c(TRUE,FALSE),size = 1, prob = c(exp((Es-Ens)/Temp),1-exp((Es-Ens)/Temp)))){
        s <- ns # ??????? ???????????
        Es <- Ens
      }
    }
  }
  return(s)
}



plot.s(way)

f()
